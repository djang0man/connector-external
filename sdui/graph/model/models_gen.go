// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type AppConnector interface {
	IsAppConnector()
	GetID() string
	GetName() string
	GetDescription() string
	GetReadme() *UIMarkdown
	GetDocURL() *string
	GetLogo() *UIImage
	GetCarousel() *UICarousel
	GetTags() *AppConnectorChip
}

type Chip interface {
	IsChip()
	GetID() *string
}

type UIComponent interface {
	IsUIComponent()
	GetID() *string
}

type UIDynamicValidator interface {
	IsUIDynamicValidator()
	GetType() string
	GetMessage() string
}

type UIPanel interface {
	IsUIComponent()
	IsUIPanel()
	GetID() *string
	GetColumns() int32
}

type AppConnectorChip struct {
	ID    *string                `json:"id,omitempty"`
	Chips []AppConnectorChipEnum `json:"chips"`
}

func (AppConnectorChip) IsChip()             {}
func (this AppConnectorChip) GetID() *string { return this.ID }

type Query struct {
}

type TextChip struct {
	ID   *string `json:"id,omitempty"`
	Text string  `json:"text"`
}

func (TextChip) IsChip()             {}
func (this TextChip) GetID() *string { return this.ID }

type UIBasicChip struct {
	ID    *string `json:"id,omitempty"`
	Chips []Chip  `json:"chips"`
}

func (UIBasicChip) IsUIComponent()      {}
func (this UIBasicChip) GetID() *string { return this.ID }

type UICarousel struct {
	ID    *string           `json:"id,omitempty"`
	Items []*UICarouselItem `json:"items"`
}

func (UICarousel) IsUIComponent()      {}
func (this UICarousel) GetID() *string { return this.ID }

type UICarouselItem struct {
	ID    *string  `json:"id,omitempty"`
	Text  *string  `json:"text,omitempty"`
	Image *UIImage `json:"image,omitempty"`
}

func (UICarouselItem) IsUIComponent()      {}
func (this UICarouselItem) GetID() *string { return this.ID }

type UIDefaultValue struct {
	ValueType *UIDefaultValueType `json:"valueType,omitempty"`
	Value     *string             `json:"value,omitempty"`
}

type UIDynamicCondition struct {
	FieldName     string                      `json:"fieldName"`
	Operator      *UIDynamicConditionOperator `json:"operator,omitempty"`
	ExpectedValue *UIDefaultValue             `json:"expectedValue,omitempty"`
}

type UIDynamicField struct {
	ID           *string                  `json:"id,omitempty"`
	Type         *UIDDynamicFieldType     `json:"type,omitempty"`
	Description  *string                  `json:"description,omitempty"`
	Label        string                   `json:"label"`
	FieldName    string                   `json:"fieldName"`
	Required     bool                     `json:"required"`
	DefaultValue *UIDefaultValue          `json:"defaultValue,omitempty"`
	Validator    UIDynamicValidator       `json:"validator,omitempty"`
	Options      []*UIDynamicSelectOption `json:"options"`
}

type UIDynamicFieldSet struct {
	ID          *string               `json:"id,omitempty"`
	Columns     *int32                `json:"columns,omitempty"`
	Label       string                `json:"label"`
	Description *string               `json:"description,omitempty"`
	Fields      []*UIDynamicField     `json:"fields"`
	Conditions  []*UIDynamicCondition `json:"conditions"`
}

type UIDynamicSelect struct {
	Label        string          `json:"label"`
	FieldName    string          `json:"fieldName"`
	DefaultValue *UIDefaultValue `json:"defaultValue,omitempty"`
}

type UIDynamicSelectOption struct {
	Label string          `json:"label"`
	Value *UIDefaultValue `json:"value,omitempty"`
}

type UIFormInput struct {
	ID          *string `json:"id,omitempty"`
	Placeholder *string `json:"placeholder,omitempty"`
	Value       *string `json:"value,omitempty"`
	DataBind    *string `json:"dataBind,omitempty"`
}

func (UIFormInput) IsUIComponent()      {}
func (this UIFormInput) GetID() *string { return this.ID }

type UIImage struct {
	ID  *string `json:"id,omitempty"`
	URL *string `json:"url,omitempty"`
	Alt *string `json:"alt,omitempty"`
}

func (UIImage) IsUIComponent()      {}
func (this UIImage) GetID() *string { return this.ID }

type UIMarkdown struct {
	ID *string `json:"id,omitempty"`
}

func (UIMarkdown) IsUIComponent()      {}
func (this UIMarkdown) GetID() *string { return this.ID }

type UIRangeValidator struct {
	Type    string `json:"type"`
	Message string `json:"message"`
	Min     int32  `json:"min"`
	Max     int32  `json:"max"`
}

func (UIRangeValidator) IsUIDynamicValidator()   {}
func (this UIRangeValidator) GetType() string    { return this.Type }
func (this UIRangeValidator) GetMessage() string { return this.Message }

type UIRegexValidator struct {
	Type    string `json:"type"`
	Message string `json:"message"`
	Pattern string `json:"pattern"`
}

func (UIRegexValidator) IsUIDynamicValidator()   {}
func (this UIRegexValidator) GetType() string    { return this.Type }
func (this UIRegexValidator) GetMessage() string { return this.Message }

type AppConnectorChipEnum string

const (
	AppConnectorChipEnumHostEnrichment AppConnectorChipEnum = "HOST_ENRICHMENT"
	AppConnectorChipEnumCveVuln        AppConnectorChipEnum = "CVE_VULN"
)

var AllAppConnectorChipEnum = []AppConnectorChipEnum{
	AppConnectorChipEnumHostEnrichment,
	AppConnectorChipEnumCveVuln,
}

func (e AppConnectorChipEnum) IsValid() bool {
	switch e {
	case AppConnectorChipEnumHostEnrichment, AppConnectorChipEnumCveVuln:
		return true
	}
	return false
}

func (e AppConnectorChipEnum) String() string {
	return string(e)
}

func (e *AppConnectorChipEnum) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppConnectorChipEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppConnectorChipEnum", str)
	}
	return nil
}

func (e AppConnectorChipEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AppConnectorChipEnum) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AppConnectorChipEnum) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type UIDDynamicFieldType string

const (
	UIDDynamicFieldTypeCheckbox UIDDynamicFieldType = "CHECKBOX"
	UIDDynamicFieldTypeInput    UIDDynamicFieldType = "INPUT"
	UIDDynamicFieldTypeRadio    UIDDynamicFieldType = "RADIO"
	UIDDynamicFieldTypeSelect   UIDDynamicFieldType = "SELECT"
	UIDDynamicFieldTypeTextarea UIDDynamicFieldType = "TEXTAREA"
)

var AllUIDDynamicFieldType = []UIDDynamicFieldType{
	UIDDynamicFieldTypeCheckbox,
	UIDDynamicFieldTypeInput,
	UIDDynamicFieldTypeRadio,
	UIDDynamicFieldTypeSelect,
	UIDDynamicFieldTypeTextarea,
}

func (e UIDDynamicFieldType) IsValid() bool {
	switch e {
	case UIDDynamicFieldTypeCheckbox, UIDDynamicFieldTypeInput, UIDDynamicFieldTypeRadio, UIDDynamicFieldTypeSelect, UIDDynamicFieldTypeTextarea:
		return true
	}
	return false
}

func (e UIDDynamicFieldType) String() string {
	return string(e)
}

func (e *UIDDynamicFieldType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UIDDynamicFieldType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UIDDynamicFieldType", str)
	}
	return nil
}

func (e UIDDynamicFieldType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *UIDDynamicFieldType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e UIDDynamicFieldType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type UIDefaultValueType string

const (
	UIDefaultValueTypeString UIDefaultValueType = "STRING"
	UIDefaultValueTypeInt    UIDefaultValueType = "INT"
	UIDefaultValueTypeBool   UIDefaultValueType = "BOOL"
	UIDefaultValueTypeJSON   UIDefaultValueType = "JSON"
)

var AllUIDefaultValueType = []UIDefaultValueType{
	UIDefaultValueTypeString,
	UIDefaultValueTypeInt,
	UIDefaultValueTypeBool,
	UIDefaultValueTypeJSON,
}

func (e UIDefaultValueType) IsValid() bool {
	switch e {
	case UIDefaultValueTypeString, UIDefaultValueTypeInt, UIDefaultValueTypeBool, UIDefaultValueTypeJSON:
		return true
	}
	return false
}

func (e UIDefaultValueType) String() string {
	return string(e)
}

func (e *UIDefaultValueType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UIDefaultValueType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UIDefaultValueType", str)
	}
	return nil
}

func (e UIDefaultValueType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *UIDefaultValueType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e UIDefaultValueType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type UIDynamicConditionOperator string

const (
	UIDynamicConditionOperatorEq      UIDynamicConditionOperator = "EQ"
	UIDynamicConditionOperatorNeq     UIDynamicConditionOperator = "NEQ"
	UIDynamicConditionOperatorGt      UIDynamicConditionOperator = "GT"
	UIDynamicConditionOperatorGte     UIDynamicConditionOperator = "GTE"
	UIDynamicConditionOperatorLt      UIDynamicConditionOperator = "LT"
	UIDynamicConditionOperatorLte     UIDynamicConditionOperator = "LTE"
	UIDynamicConditionOperatorExists  UIDynamicConditionOperator = "EXISTS"
	UIDynamicConditionOperatorNexists UIDynamicConditionOperator = "NEXISTS"
	UIDynamicConditionOperatorNull    UIDynamicConditionOperator = "NULL"
	UIDynamicConditionOperatorNnull   UIDynamicConditionOperator = "NNULL"
)

var AllUIDynamicConditionOperator = []UIDynamicConditionOperator{
	UIDynamicConditionOperatorEq,
	UIDynamicConditionOperatorNeq,
	UIDynamicConditionOperatorGt,
	UIDynamicConditionOperatorGte,
	UIDynamicConditionOperatorLt,
	UIDynamicConditionOperatorLte,
	UIDynamicConditionOperatorExists,
	UIDynamicConditionOperatorNexists,
	UIDynamicConditionOperatorNull,
	UIDynamicConditionOperatorNnull,
}

func (e UIDynamicConditionOperator) IsValid() bool {
	switch e {
	case UIDynamicConditionOperatorEq, UIDynamicConditionOperatorNeq, UIDynamicConditionOperatorGt, UIDynamicConditionOperatorGte, UIDynamicConditionOperatorLt, UIDynamicConditionOperatorLte, UIDynamicConditionOperatorExists, UIDynamicConditionOperatorNexists, UIDynamicConditionOperatorNull, UIDynamicConditionOperatorNnull:
		return true
	}
	return false
}

func (e UIDynamicConditionOperator) String() string {
	return string(e)
}

func (e *UIDynamicConditionOperator) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UIDynamicConditionOperator(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UIDynamicConditionOperator", str)
	}
	return nil
}

func (e UIDynamicConditionOperator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *UIDynamicConditionOperator) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e UIDynamicConditionOperator) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
